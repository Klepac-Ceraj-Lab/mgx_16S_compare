tip <- c(
"Eopsaltriidae", "Acanthisittidae", "Pittidae", "Eurylaimidae",
"Philepittidae", "Tyrannidae", "Thamnophilidae", "Furnariidae",
"Formicariidae", "Conopophagidae", "Rhinocryptidae", "Climacteridae",
"Menuridae", "Ptilonorhynchidae", "Maluridae", "Meliphagidae",
"Pardalotidae", "Petroicidae", "Irenidae", "Orthonychidae",
"Pomatostomidae", "Laniidae", "Vireonidae", "Corvidae",
"Callaeatidae", "Picathartidae", "Bombycillidae", "Cinclidae",
"Muscicapidae", "Sturnidae", "Sittidae", "Certhiidae",
"Paridae", "Aegithalidae", "Hirundinidae", "Regulidae",
"Pycnonotidae", "Hypocoliidae", "Cisticolidae", "Zosteropidae",
"Sylviidae", "Alaudidae", "Nectariniidae", "Melanocharitidae",
"Paramythiidae","Passeridae", "Fringillidae")
# read in tip names (species names)
tip <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
tip <- c(
"Eopsaltriidae", "Acanthisittidae", "Pittidae", "Eurylaimidae",
"Philepittidae", "Tyrannidae", "Thamnophilidae", "Furnariidae",
"Formicariidae", "Conopophagidae", "Rhinocryptidae", "Climacteridae",
"Menuridae", "Ptilonorhynchidae", "Maluridae", "Meliphagidae",
"Pardalotidae", "Petroicidae", "Irenidae", "Orthonychidae",
"Pomatostomidae", "Laniidae", "Vireonidae", "Corvidae",
"Callaeatidae", "Picathartidae", "Bombycillidae", "Cinclidae",
"Muscicapidae", "Sturnidae", "Sittidae", "Certhiidae",
"Paridae", "Aegithalidae", "Hirundinidae", "Regulidae",
"Pycnonotidae", "Hypocoliidae", "Cisticolidae", "Zosteropidae",
"Sylviidae", "Alaudidae", "Nectariniidae", "Melanocharitidae",
"Paramythiidae","Passeridae", "Fringillidae")
tip_test
tip
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip <- lapply(tip, function(x) gsub(" ", "_", x))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip <- lapply(tip_test, function(x) gsub(" ", "_", x))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test
# example
data(bird.families)
plot(bird.families)
tip <- c(
"Eopsaltriidae", "Acanthisittidae", "Pittidae", "Eurylaimidae",
"Philepittidae", "Tyrannidae", "Thamnophilidae", "Furnariidae",
"Formicariidae", "Conopophagidae", "Rhinocryptidae", "Climacteridae",
"Menuridae", "Ptilonorhynchidae", "Maluridae", "Meliphagidae",
"Pardalotidae", "Petroicidae", "Irenidae", "Orthonychidae",
"Pomatostomidae", "Laniidae", "Vireonidae", "Corvidae",
"Callaeatidae", "Picathartidae", "Bombycillidae", "Cinclidae",
"Muscicapidae", "Sturnidae", "Sittidae", "Certhiidae",
"Paridae", "Aegithalidae", "Hirundinidae", "Regulidae",
"Pycnonotidae", "Hypocoliidae", "Cisticolidae", "Zosteropidae",
"Sylviidae", "Alaudidae", "Nectariniidae", "Melanocharitidae",
"Paramythiidae","Passeridae", "Fringillidae")
nielle/Documents/thesis/paper-phylogeny")
nielle/Documents/thesis/paper-phylogeny")
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
tip_test
phylo
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
plot(drop.tip(phylo, tip, trim.internal = FALSE))
write.tree((drop.tip(phylo, tip, trim.internal = FALSE)), "trimmed_tree.nwk")
tip
tip_test <- unlist(tip_testt)
tip_test <- unlist(tip_test)
tip_test
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- unlist(tip_test)
tip_test
plot(drop.tip(phylo, tip, trim.internal = FALSE))
write.tree((drop.tip(phylo, tip, trim.internal = FALSE)), "trimmed_tree.nwk")
new_tree <- drop.tip(phylo, tip, trim.internal = FALSE)
new_tree
new_tree <- drop.tip(phylo, tip_testt, trim.internal = FALSE)
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
new_tree
class(tip_test)
new_tree <- drop.tip(phylo, tip_test)
new_tree
class(phylo)
class(phylo$tip.label)
tip_testt
tip_test
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("[", "", x))
tip_test <- lapply(tip_test, function(x) gsub("]", "", x))
tip_test <- unlist(tip_test)
new_tree <- drop.tip(phylo, tip_test)
write.tree((drop.tip(phylo, tip, trim.internal = FALSE)), "trimmed_tree.nwk")
new_tree <- drop.tip(phylo, tip_test)
write.tree(new_tree, "trimmed_tree.nwk")
new_tree
tip_testt
tip_testt
tip_test
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("[", "", x))
tip_test <- lapply(tip_test, function(x) gsub("]", "", x))
tip_test
tip_test <- unlist(tip_test)
tip_test
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("[", "", x))
tip_test <- lapply(tip_test, function(x) gsub("]", "", x))
tip_test <- unlist(tip_test)
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
write.tree(new_tree, "trimmed_tree.nwk")
tip_test <- lapply(tip_test, function(x) gsub("]\\", "", x))
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("\\[|\\]", "", x))
tip_test <- unlist(tip_test)
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
write.tree(new_tree, "trimmed_tree.nwk")
new_tree
new_tree$tip.label
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test
tip_test <- unlist(tip_test)
tip_test
tip_test <- lapply(tip_test, function(x) gsub("\\[|\\]", "", x))
tip_test <- unlist(tip_test)
tip_test
tip_test[0]
tip_test
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
new_tree$tip.label
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("\\[|\\]", "", x))
tip_test <- unlist(tip_test)
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
new_tree$tip.label <- lapply(tip_test, function(x) gsub(" ", "_", x))
write.tree(new_tree, "trimmed_tree.nwk")
new_tree
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# read in original phylogenetic tree
phylo <- read.tree("all_taxa.nwk")
# read in tip names (species names)
tip_test <- c(scan("remove_species.txt", what="character", sep=",",
strip.white = TRUE))
# replace "_" with empty spaces in species names (like how they are in phylo tree)
tip_test <- lapply(tip_test, function(x) gsub(" ", "_", x))
tip_test <- lapply(tip_test, function(x) gsub("\\[|\\]", "", x))
tip_test <- unlist(tip_test)
new_tree <- drop.tip(phylo, tip_test, trim.internal = FALSE)
new_tree
write.tree(new_tree, "trimmed_tree.nwk")
length(new_tree$tip.label)
phylo <- read.tree("species_timetree.nwk")
phylo$tip.label
phylo$tip.label <- unlist(lapply(phylo$tip.label, function(x) gsub("_.*","",x)))
phylo$tip.label
write.tree(phylo, "trimmed_tree.nwk")
phylo$tip.label
library(vegan)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(phyloseq)
library(grid)
library(reshape2)
setwd("/Users/danielle/Documents/thesis/paper-abundance-tables")
df <- read.csv("mgx_abund_df.csv", header=TRUE)
df["shannon"] <- diversity(df[,4:143], "shannon")
df$dev_stage <- factor(df$dev_stage,
levels = c("less than 15 months",
"15 to 30 months",
"older than 30 months"), ordered = TRUE)
df_stage1 <- df[df$dev_stage == "less than 15 months",]
library(vegan)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(phyloseq)
library(grid)
library(reshape2)
setwd("/Users/danielle/Documents/thesis/paper-abundance-tables")
df <- read.csv("mgx_abund_df.csv", header=TRUE)
# calculating shannon diversity
df["shannon"] <- diversity(df[,4:143], "shannon")
df$dev_stage <- factor(df$dev_stage,
levels = c("less than 15 months",
"15 to 30 months",
"older than 30 months"), ordered = TRUE)
# age statistics
df_stage1 <- df[df$dev_stage == "less than 15 months",]
#mean(df_stage1[df_stage1$method == "mgx", ]$shannon)
#mean(df_stage1[df_stage1$method == "amp", ]$shannon)
#t.test(as.numeric(df_stage1$shannon)~ df_stage1$method)
df_stage2 <- df[df$dev_stage == "15 to 30 months",]
#kruskal.test(as.numeric(df_stage2$shannon) ~ df_stage2$method)
df_stage3 <- df[df$dev_stage == "older than 30 months",]
#kruskal.test(as.numeric(df_stage3$shannon) ~ df_stage3$method)
#anova_dev_stage <- aov(as.numeric(df$shannon) ~ df$dev_stage)
#summary(anova_dev_stage)
#posthoc <- TukeyHSD(anova_dev_stage, 'df$dev_stage', conf.level=0.95)
#posthoc
# number of kids in each age group
nrow(df_stage1) # 85
nrow(df_stage2) # 15
nrow(df_stage3) # 60
nrow(df)
# age statistics
mean(df_stage1$AgeMonths)
sqrt(var(df_stage1$AgeMonths))
mean(df_stage2$AgeMonths)
sqrt(var(df_stage2$AgeMonths))
mean(df_stage3$AgeMonths)
sqrt(var(df_stage3$AgeMonths))
# only counting 1 profiling method (to get number of kids, not profiles)
#df_stage1_mgx <- df_stage1[df_stage1$method == "mgx",]
#df_stage2_mgx <- df_stage2[df_stage2$method == "mgx",]
#df_stage3_mgx <- df_stage3[df_stage3$method == "mgx",]
#df_ages <- df[,c("sampleid","method","dev_stage", "AgeMonths")]
#df_ages <- df_ages[df_ages$method == "mgx",]
ageplot<- ggplot(df, aes(x = AgeMonths)) +
geom_histogram(data=df_stage1, fill = "#481567FF", alpha=0.7, binwidth = 10)+
geom_histogram(data=df_stage1, fill = "#238A8DFF", alpha=0.7, binwidth = 10)+
geom_histogram(data=df_stage1, fill = "#FDE725FF", alpha=0.7, binwidth = 10)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="bottom") + ylab("# of samples") + xlab("Age (months)") +
labs(title = "", tag = "B")+ theme(legend.position = c(0.5, 0.5))+
scale_color_manual(values=c("less than 15 months"="#481567FF", "15 to 30 months"="#238A8DFF",
"older than 30 months"="#FDE725FF"))
ageplot <- ggplot(df, aes(x = AgeMonths, fill = dev_stage)) +
geom_histogram(data = df, position = "identity", alpha = 0.7, binwidth = 12) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.title = element_blank()) + ylab("# of samples") + xlab("Age (months)") +
labs(title = "", tag = "")+ theme(legend.position = c(0.8, 0.8))
ageplot
kruskal.test(as.numeric(df_stage2$shannon) ~ df_stage2$method)
df_stage3 <- df[df$dev_stage == "older than 30 months",]
kruskal.test(as.numeric(df_stage2$shannon) ~ df_stage2$method)
library(vegan)
library(ggplot2)
library(gridExtra)
library(scales)
library(reshape2)
library(RColorBrewer)
library(scales)
set.seed(3434)
setwd("/Users/danielle/Documents/thesis/theoretical")
mock <- read.csv("mock_communities2.csv", header=TRUE)
for (ii in 1:30) {
mock[ii, 2:(mock[ii, "num_bugs"]+1)] <- (rpois(mock[ii,"num_bugs"], mock[ii,"parameter"]))
}
mock["total"] <- rowSums(mock[,2:101], na.rm = TRUE)
mock[is.na(mock)] <- 0
mock["shannon"] <- diversity(mock[,2:101], index="shannon")
mock["evenness"] <- diversity(mock[,2:101], "simpson")
mock["richness"] <- apply(mock[,2:101]>0,1,sum)
mock["min_abund"] <- (1.0/mock["total"])
genome_length <- 4000000
read_length <- 150
mock["reads"] <- genome_length/(read_length*mock$min_abund)
write.csv(mock, "mock_communities2_filled.csv" )
# mean richness for different sequencing depths
mean(mock[mock$reads <= 10000,]$richness)
mean(mock[mock$reads <= 100000,]$richness)
mean(mock[mock$reads <= 1000000,]$richness)
##### Make plot of estimated reads ~ eveness + richness ######
plot<- ggplot(mock, aes(log(richness), evenness))
plot1 <- plot + geom_point(aes(color = reads), size = 1.0) +
scale_color_gradientn(colours = rainbow(6), labels= comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position=c(0.85, 0.5))+
labs(title = "", tag = "A")+
stat_compare_means(method = "t.test", label = "p.signif", label.x = 2, label.y = 1)+
xlim(0,5)
plot1
# adding on actual data points
babies2 <- read.csv("/Users/danielle/Documents/thesis/theoretical/theoretical_babies_df.csv")
babies2["shannon"] <- diversity(babies2[,6:134], index="shannon")
babies2["evenness"] <- diversity(babies2[,6:134], "simpson")
babies2["richness"] <- apply(babies2[,6:134]>0,1,sum)
# creating linear model
log_reads <- log(mock$reads)
log_reads[is.infinite(log_reads)] <- NA
model <- lm(log_reads ~ evenness + log(richness), data=mock)
predict_data <-  babies2
predictions <- predict(model, predict_data)
babies2$read_predictions <- exp(predictions) #unlog transformation
babies2$dev_stage <- factor(babies2$dev_stage, levels = c("less than 15 months", "15 to 30 months", "older than 30 months"))
# calculating mean sequencing depth for each age group
mean.under15 <- mean(na.omit(babies2[babies2$dev_stage == "less than 15 months",]$read_predictions))
var.under15 <- var(na.omit(babies2[babies2$dev_stage == "less than 15 months",]$read_predictions))
c(mean.under15-1.96*sqrt(var.under15), mean.under15+1.96*sqrt(var.under15))
mean.over15 <- mean(na.omit(babies2[babies2$dev_stage == "15 to 30 months"
|babies2$dev_stage == "older than 30 months",]$read_predictions))
var.over15 <- var(na.omit(babies2[babies2$dev_stage == "15 to 30 months"
|babies2$dev_stage == "older than 30 months",]$read_predictions))
c(mean.over15-1.96*sqrt(var.over15), mean.over15+1.96*sqrt(var.over15))
mean(babies2[babies2$dev_stage == "older than 30 months",]$read_predictions)
# boxplots
babies3 <- subset(babies2, select=c("sampleid", "dev_stage", "read_predictions"))
colnames(babies3)[3] <- "predicted necessary depth"
babies3 <- melt(babies3)
babies4 <- subset(babies2, select=c("sampleid", "dev_stage", "read_depth"))
colnames(babies4)[3] <- "sequenced depth"
babies4 <- melt(babies4)
babies5 <- rbind(babies3, babies4)
p3 <- ggplot(na.omit(babies5), aes(x = dev_stage, y = value)) +
geom_boxplot(aes(colour = variable))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
ylab("read depth") + xlab("developmental stage")+
labs(title = "", tag = "C")+ theme(legend.title = element_blank()) +
theme(legend.position = c(0.25, 0.85)) +
scale_y_continuous(label=comma)+
scale_fill_manual(values = c("#E7B800", "#FC4E07"))
p3
# statistics
aov <- aov(read_predictions~dev_stage, babies2)
summary(aov)
TukeyHSD(aov)
# plotting read predictions
babies2$dev_stage <- factor(babies2$dev_stage,
levels = c("less than 15 months",
"15 to 30 months",
"older than 30 months"),ordered = TRUE)
plot2 <- ggplot(data=subset(babies2, !is.na(dev_stage)), aes(log(richness), evenness))
plot2<- plot2+ geom_point(aes(color = dev_stage), alpha=0.4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position=c(0.25, 0.85)) +
guides(color=guide_legend("age")) + ylim(0, 1.0) + xlim(0,5)+
labs(title = "", tag = "B")
gl <- list(plot1, p3, plot2)
grid.arrange(
grobs = gl,
widths = c(2, 1, 1),
layout_matrix = rbind(c(1,2, 2),
c(3, 2,2))
)
plot1
library(vegan)
library(ggplot2)
library(gridExtra)
library(scales)
library(reshape2)
library(RColorBrewer)
library(scales)
set.seed(3434)
setwd("/Users/danielle/Documents/thesis/theoretical")
mock <- read.csv("mock_communities2.csv", header=TRUE)
for (ii in 1:30) {
mock[ii, 2:(mock[ii, "num_bugs"]+1)] <- (rpois(mock[ii,"num_bugs"], mock[ii,"parameter"]))
}
mock["total"] <- rowSums(mock[,2:101], na.rm = TRUE)
mock[is.na(mock)] <- 0
mock["shannon"] <- diversity(mock[,2:101], index="shannon")
mock["evenness"] <- diversity(mock[,2:101], "simpson")
mock["richness"] <- apply(mock[,2:101]>0,1,sum)
mock["min_abund"] <- (1.0/mock["total"])
genome_length <- 4000000
read_length <- 150
mock["reads"] <- genome_length/(read_length*mock$min_abund)
write.csv(mock, "mock_communities2_filled.csv" )
mean(mock[mock$reads <= 10000,]$richness)
mean(mock[mock$reads <= 100000,]$richness)
mean(mock[mock$reads <= 1000000,]$richness)
plot<- ggplot(mock, aes(log(richness), evenness))
plot1 <- plot + geom_point(aes(color = reads), size = 1.0) +
scale_color_gradientn(colours = rainbow(6), labels= comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position=c(0.85, 0.5))+
labs(title = "", tag = "A")+
stat_compare_means(method = "t.test", label = "p.signif", label.x = 2, label.y = 1)+
xlim(0,5)
plot1
plot1 <- plot + geom_point(aes(color = reads), size = 1.0) +
scale_color_gradientn(colours = rainbow(6), labels= comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position=c(0.85, 0.5))+
labs(title = "", tag = "A")+
xlim(0,5)
plot1
babies2 <- read.csv("/Users/danielle/Documents/thesis/theoretical/theoretical_babies_df.csv")
babies2["shannon"] <- diversity(babies2[,6:134], index="shannon")
babies2["evenness"] <- diversity(babies2[,6:134], "simpson")
babies2["richness"] <- apply(babies2[,6:134]>0,1,sum)
# creating linear model
log_reads <- log(mock$reads)
log_reads[is.infinite(log_reads)] <- NA
model <- lm(log_reads ~ evenness + log(richness), data=mock)
predict_data <-  babies2
predictions <- predict(model, predict_data)
babies2$read_predictions <- exp(predictions) #unlog transformation
babies2$dev_stage <- factor(babies2$dev_stage, levels = c("less than 15 months", "15 to 30 months", "older than 30 months"))
mean.under15 <- mean(na.omit(babies2[babies2$dev_stage == "less than 15 months",]$read_predictions))
var.under15 <- var(na.omit(babies2[babies2$dev_stage == "less than 15 months",]$read_predictions))
c(mean.under15-1.96*sqrt(var.under15), mean.under15+1.96*sqrt(var.under15))
mean.over15 <- mean(na.omit(babies2[babies2$dev_stage == "15 to 30 months"
|babies2$dev_stage == "older than 30 months",]$read_predictions))
var.over15 <- var(na.omit(babies2[babies2$dev_stage == "15 to 30 months"
|babies2$dev_stage == "older than 30 months",]$read_predictions))
c(mean.over15-1.96*sqrt(var.over15), mean.over15+1.96*sqrt(var.over15))
mean(babies2[babies2$dev_stage == "older than 30 months",]$read_predictions)
# boxplots
babies3 <- subset(babies2, select=c("sampleid", "dev_stage", "read_predictions"))
colnames(babies3)[3] <- "predicted necessary depth"
babies3 <- melt(babies3)
babies4 <- subset(babies2, select=c("sampleid", "dev_stage", "read_depth"))
colnames(babies4)[3] <- "sequenced depth"
babies4 <- melt(babies4)
babies5 <- rbind(babies3, babies4)
p3 <- ggplot(na.omit(babies5), aes(x = dev_stage, y = value)) +
geom_boxplot(aes(colour = variable))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
ylab("read depth") + xlab("developmental stage")+
labs(title = "", tag = "C")+ theme(legend.title = element_blank()) +
theme(legend.position = c(0.25, 0.85)) +
scale_y_continuous(label=comma)+
scale_fill_manual(values = c("#E7B800", "#FC4E07"))
p3
# statistics
aov <- aov(read_predictions~dev_stage, babies2)
summary(aov)
TukeyHSD(aov)
babies2$dev_stage <- factor(babies2$dev_stage,
levels = c("less than 15 months",
"15 to 30 months",
"older than 30 months"),ordered = TRUE)
plot2 <- ggplot(data=subset(babies2, !is.na(dev_stage)), aes(log(richness), evenness))
plot2<- plot2+ geom_point(aes(color = dev_stage), alpha=0.4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position=c(0.25, 0.85)) +
guides(color=guide_legend("age")) + ylim(0, 1.0) + xlim(0,5)+
labs(title = "", tag = "B")
gl <- list(plot1, p3, plot2)
grid.arrange(
grobs = gl,
widths = c(2, 1, 1),
layout_matrix = rbind(c(1,2, 2),
c(3, 2,2))
)
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# replace species with genera
phylo <- read.tree("species_timetree.nwk")
phylo$tip.label <- unlist(lapply(phylo$tip.label, function(x) gsub("_.*","",x)))
write.tree(phylo, "trimmed_tree.nwk")
library(ape)
setwd("/Users/danielle/Documents/thesis/paper-phylogeny")
# replace species with genera
phylo <- read.tree("species_timetree.nwk")
phylo$tip.label <- unlist(lapply(phylo$tip.label, function(x) gsub("_.*","",x)))
write.tree(phylo, "trimmed_tree.nwk")
phylo
